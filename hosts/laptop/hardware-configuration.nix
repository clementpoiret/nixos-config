# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  pkgs,
  config,
  lib,
  modulesPath,
  ...
}:

{
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot.initrd.availableKernelModules = [
    "nvme"
    "xhci_pci"
    "thunderbolt"
    "usbhid"
    "usb_storage"
    "sd_mod"
  ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [
    "kvm-amd"
    "amdgpu"
  ];
  boot.extraModulePackages = [ ];

  fileSystems = {
    "/" = {
      device = "/dev/disk/by-uuid/caf8fdb0-bbd6-4f1d-a2f0-8a1c48f6f548";
      fsType = "btrfs";
      options = [
        "subvol=@"
        "compress=zstd:6"
        "noatime"
        "ssd"
        "discard=async"
        "space_cache=v2"
      ];
    };
    "/boot" = {
      device = "/dev/disk/by-uuid/BB14-DA46";
      fsType = "vfat";
      options = [
        "fmask=0022"
        "dmask=0022"
      ];
    };
    "/home" = {
      device = "/dev/disk/by-uuid/7556b3b1-f898-483b-a8b6-58fefe883c33";
      fsType = "btrfs";
      options = [
        "compress=zstd:6"
        "noatime"
        "ssd"
        "discard=async"
        "space_cache=v2"
      ];
    };
    "/home/clementpoiret/datatraveler" = {
      device = "/dev/disk/by-uuid/b12ea93c-293a-45d7-88ab-ba4c4c760d26";
      fsType = "btrfs";
      options = [
        "noauto"
        "user"
        "compress=zstd:6"
        "noatime"
        "ssd"
        "discard=async"
        "space_cache=v2"
      ];
    };
  };

  boot.initrd.luks.devices = {
    "luks-4b1c13e3-af35-4286-b534-674ca54de75a".device =
      "/dev/disk/by-uuid/4b1c13e3-af35-4286-b534-674ca54de75a";
    "luks-5ee5fadf-22f0-4a53-a33d-63e22931255f".device =
      "/dev/disk/by-uuid/5ee5fadf-22f0-4a53-a33d-63e22931255f";
  };

  zramSwap = {
    enable = true;
    algorithm = "zstd";
    memoryPercent = 50;
    priority = 100;
  };
  swapDevices = [
    {
      device = "/var/lib/swapfile";
      size = 64 * 1024;
      priority = 0;
    }
  ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp5s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

  # amdgpu
  hardware.graphics = {
    enable = true;
    enable32Bit = true;
  };
  hardware.graphics.extraPackages = with pkgs; [
    rocmPackages.clr
  ];
  hardware.amdgpu.initrd.enable = true;
  services.xserver.videoDrivers = [ "modesetting" ];
  # systemd.tmpfiles.rules =
  #   let
  #     rocmEnv = pkgs.symlinkJoin {
  #       name = "rocm-combined";
  #       paths = with pkgs.rocmPackages; [
  #         rocblas
  #         hipblas
  #         clr
  #       ];
  #     };
  #   in
  #   [
  #     "L+    /opt/rocm   -    -    -     -    ${rocmEnv}"
  #   ];
  systemd.tmpfiles.rules = [
    "L+    /opt/rocm/hip   -    -    -     -    ${pkgs.rocmPackages.clr}"
  ];

  # Fan Control
  hardware.fw-fanctrl = {
    enable = true;
    config = {
      defaultStrategy = "lazy";
    };
  };

  # Misc
  # chaotic.hdr.enable = true;
}
